% Read data k-wave generated by cluster
%% (i) 3D attempt
pathdata = 'P:\emiranda\proj\rswe\kwave_v1\simRSWF\';
namedata = 'RSWF_v1p1_homo'; % 3sources
% namedata = 'RSWF_v1p6_homo'; % 6sources
% namedata = 'RSWF_v1p30_homo'; % 30sources
mykwave = load(fullfile(pathdata, namedata));


% arrayK = gather(mykwave.uz_s(:,:,:,1500));

%%

array2D = squeeze(mykwave.uz_s_array(10,:,:,:));
array2D = array2D';

dinf.dx = 0.1E-3;
dinf.dz = 0.1E-3;
freq = 500;

framerate = 60;
array2D_small = array2D(:,:,2500:end);
filtered = 1;
dinf.prf = 5000;

create_pv_movie(array2D,dinf,framerate,freq,filtered)


%%
uz_s = mykwave.uz_s_array;
xx = mykwave.kgrid.kx_vec;
zz = mykwave.kgrid.kz_vec;

figure,
max_uz=max(uz_s(:));
min_uz=min(uz_s(:));

init = 2500;
last = 3000;
for ii=init:5:last
%im=squeeze((uz_s(10,:,:,ii)-min_uz)/(max_uz-min_uz))';
    im=squeeze((uz_s(10,:,:,ii)))';
    imagesc(xx,zz,im);
    xlabel('x (mm)'); ylabel('z (mm)');
    axis image;
    % clim([-0.01 0.01]); %modify limits to see waves
    clim([-2.5e-5 2.5e-5])
    title(['SWS - XZ plane - Frame ' num2str(ii)]);
    grid on;
    colormap('parula')
    colorbar;
    drawnow
    pause(0.1)
end
%% FILTERING
cs_min = 1;
cs_max = 8;

dinf.PRFe = 200E3;

u_filt = fun_JO_v2(array2D_small, freq, dinf, cs_min, cs_max);

%%
% FFT2 plots
sws2krad = @(sws, freq) 2*pi*freq / sws; 
krad2sws = @(krad, freq) 2*pi*freq / krad;

sws2kmm =  @(sws, freq) 1e-3*freq / sws; 
kmm2sws = @(kmm, freq) freq / (kmm*1e3);
%

%% FGD EMZ ENHANCED

x = mykwave.kgrid.kx_vec;
z = mykwave.kgrid.kz_vec;

range_dB = [-120 0];
cs_min = 1; cs_max = 8; 
Fs = dinf.PRFe;
u_complex = temporal_extraction(array2D_small,freq,Fs);
u_Filtered = spatial_filtering(u_complex,dinf,freq,cs_min,cs_max);


[KX, KZ] = freqspace(size(u_complex),'meshgrid');
Fs_x = 1/dinf.dx;
Fs_z = 1/dinf.dz;
KX_m = KX*(Fs_x/2); % [1/m]
KZ_m = KZ*(Fs_z/2); % [1/m]
KX_rad = KX_m*2*pi; % [rad/m]
KZ_rad = KZ_m*2*pi; % [rad/m]

kx_m = KX_m(1,:); 
kz_m = KZ_m(:,1);
kx_rad = KX_rad(1,:);
kz_rad = KZ_rad(:,1);

space_map = u_complex; 
kmap = fftshift( fft2(space_map) );
abs_kmap = abs(kmap);
abs_kmap_normalized = abs_kmap / max(abs_kmap(:));
abs_kmap_dB = 20 * log10(abs_kmap_normalized);

figure,
set(gcf, 'units', 'Normalized', 'Position', [0 0.1 0.85 0.75])
tiledlayout(2,3)
sgtitle('')

nexttile
imagesc( x*1e3, z*1e3, angle(space_map)  );
axis('image')
title('u complex')
colorbar, 
% title(['k = ', num2str(wvnumber)])
xlabel('Lateral (mm)'), ylabel('Depth (mm)')

nexttile
imagesc(kx_rad, kz_rad, abs_kmap_dB, range_dB), colorbar, colormap("parula")
axis('image')
% imagesc(kx, ky, Hd), colorbar
xlabel('Kx (rad/m)'), ylabel('Ky (rad/m)')
% title('|H|')
a=colorbar;
a.Label.String = 'Norm. Power (dB)';
xlim([-5000 5000])
ylim([-5000 5000])

nexttile
imagesc(kx_m*1e-3, kz_m*1e-3,abs_kmap_dB, range_dB), colorbar, colormap("parula")
axis('image')
xlabel('Kx (1/mm)'), ylabel('Ky (1/mm)')
% title('|H|')
a=colorbar;
a.Label.String = 'Norm. Power (dB)';
xlim([-2 2])
ylim([-2 2])


space_map = u_Filtered; 
% Perform the 2D FFT and shift the zero-frequency component to the center
kmap = fftshift( fft2(space_map) );
abs_kmap = abs(kmap);
abs_kmap_normalized = abs_kmap / max(abs_kmap(:));
abs_kmap_dB = 20 * log10(abs_kmap_normalized);

nexttile
imagesc( x*1e3, z*1e3, angle(space_map)  );
title('u filtered')
axis('image')
colorbar, 
% title(['k = ', num2str(wvnumber)])
xlabel('Lateral (mm)'), ylabel('Depth (mm)')
% xlim([-5000 5000])
% ylim([-5000 5000])

nexttile
imagesc(kx_rad, kz_rad, abs_kmap_dB, range_dB), colorbar, colormap("parula")
axis('image')
% imagesc(kx, ky, Hd), colorbar
xlabel('Kx (rad/m)'), ylabel('Ky (rad/m)')
% title('|H|')
a=colorbar;
a.Label.String = 'Norm. Power (dB)';
xlim([-5000 5000])
ylim([-5000 5000])

nexttile
imagesc(kx_m*1e-3, kz_m*1e-3,abs_kmap_dB, range_dB), colormap("parula")
axis('image')
xlabel('Kx (1/mm)'), ylabel('Ky (1/mm)')
% title('|H|')
a=colorbar;
a.Label.String = 'Norm. Power (dB)';
xlim([-2 2])
ylim([-2 2])

